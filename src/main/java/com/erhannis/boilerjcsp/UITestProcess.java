/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.erhannis.boilerjcsp;

import org.jcsp.lang.AltingChannelInput;
import org.jcsp.lang.AltingChannelInputInt;
import org.jcsp.lang.Any2OneChannel;
import org.jcsp.lang.Any2OneChannelInt;
import org.jcsp.lang.CSProcess;
import org.jcsp.lang.Channel;
import org.jcsp.lang.ChannelOutput;
import org.jcsp.lang.ChannelOutputInt;
import org.jcsp.lang.Parallel;
import org.jcsp.util.InfiniteBuffer;


/**
 * AUTOGENERATED, DO NOT TOUCH (except the run method)
 * Specification:
 * name: UITest
 * type: processinterface
 * channelOut: int channel1
 * channelOut: java.lang.String channel2
 * channelOut: int channel3
 */
public class UITestProcess
    implements CSProcess
{
    protected final AltingChannelInputInt channel1In;
    protected final AltingChannelInput<String> channel2In;
    protected final AltingChannelInputInt channel3In;

    public UITestProcess(AltingChannelInputInt channel1In, AltingChannelInput<String> channel2In, AltingChannelInputInt channel3In) {
        this.channel1In = channel1In;
        this.channel2In = channel2In;
        this.channel3In = channel3In;
    }

    public static UITestProcessInterface create() {
        Any2OneChannelInt channel1 = Channel.any2oneInt();
        Any2OneChannel<String> channel2 = Channel.<String> any2one();
        Any2OneChannelInt channel3 = Channel.any2oneInt();
        Any2OneChannel<UITestProcessInterface.MethodInvocation> methodInvocationChannel = Channel.<UITestProcess.UITestProcessInterface.MethodInvocation> any2one(new InfiniteBuffer<UITestProcessInterface.MethodInvocation>());
        UITestProcess process = new UITestProcess(channel1 .in(), channel2 .in(), channel3 .in());
        return new UITestProcessInterface(methodInvocationChannel.in(), methodInvocationChannel.out(), process, channel1 .out(), channel2 .out(), channel3 .out());
    }

    @Override
    public void run() {
    }

    public static class UITestProcessInterface
        extends Parallel
    {
        protected final static int METHOD_channel1 = 0;
        protected final static int METHOD_channel2 = 1;
        protected final static int METHOD_channel3 = 2;
        protected final ChannelOutput<UITestProcessInterface.MethodInvocation> methodInvocationChannelOut;

        public UITestProcessInterface(AltingChannelInput<UITestProcessInterface.MethodInvocation> methodInvocationChannelIn, ChannelOutput<UITestProcessInterface.MethodInvocation> methodInvocationChannelOut, UITestProcess process, ChannelOutputInt channel1Out, ChannelOutput<String> channel2Out, ChannelOutputInt channel3Out) {
            super(new CSProcess[] {() -> {
                while (true) {
                    UITestProcessInterface.MethodInvocation mi = methodInvocationChannelIn.read();
                    switch (mi.option) {
                        case METHOD_channel1 :
                        {
                            channel1Out.write(mi.valueInt);
                            break;
                        }
                        case METHOD_channel2 :
                        {
                            channel2Out.write(((String) mi.value));
                            break;
                        }
                        case METHOD_channel3 :
                        {
                            channel3Out.write(mi.valueInt);
                            break;
                        }
                        default:
                        {
                            throw new IllegalArgumentException((("Something went wrong; no method # "+ mi.option)+" known"));
                        }
                    }
                }
            }
            , process });
            this.methodInvocationChannelOut = methodInvocationChannelOut;
        }

        public void channel1Out(int value) {
            methodInvocationChannelOut.write(new UITestProcessInterface.MethodInvocation(METHOD_channel1, value, null));
        }

        public void channel2Out(String value) {
            methodInvocationChannelOut.write(new UITestProcessInterface.MethodInvocation(METHOD_channel2, 0, value));
        }

        public void channel3Out(int value) {
            methodInvocationChannelOut.write(new UITestProcessInterface.MethodInvocation(METHOD_channel3, value, null));
        }

        private static class MethodInvocation {
            public final int option;
            public final int valueInt;
            public final Object value;

            public MethodInvocation(int option, int valueInt, Object value) {
                this.option = option;
                this.valueInt = valueInt;
                this.value = value;
            }
        }
    }
}
